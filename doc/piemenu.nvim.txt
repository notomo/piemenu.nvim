*piemenu.nvim.txt*

==============================================================================
Lua module: piemenu                                     *piemenu.nvim-piemenu*

start({name}, {setting})                                     *piemenu.start()*
  Start a piemenu.

  Parameters: ~
    {name} (string) registered name by |piemenu.register()|
    {setting} (PiemenuSetting) |PiemenuSetting|

highlight()                                              *piemenu.highlight()*
  Highlight a current hovered menu.

finish()                                                    *piemenu.finish()*
  Execute a current hovered menu's action and close all.

cancel()                                                    *piemenu.cancel()*
  Close all displayed menus.

register({name}, {setting})                               *piemenu.register()*
  Register a piemenu setting.

  Parameters: ~
    {name} (string) key to lookup pimenu setting
    {setting} (PiemenuSetting) |PiemenuSetting|

clear({name})                                                *piemenu.clear()*
  Clear a registered piemenu setting.

  Parameters: ~
    {name} (string) registered name by |piemenu.register()|

clear_all()                                              *piemenu.clear_all()*
  Clear all registered piemenus settings.

==============================================================================
STRUCTURE                                             *piemenu.nvim-STRUCTURE*

PiemenuSetting                                                *PiemenuSetting*

- {animation} (PiemenuAnimation?) |PiemenuAnimation|
- {menus} ((PiemenuMenu|{})[]?) If the element is empty table, the menu is not opened but used as spacer. If the circle is clipped by editor area, spacers are omitted. |PiemenuMenu|
- {position} (integer[]?) {row, col}
- {radius} (integer?) piemenu circle radius, default: 12
- {start_angle} (integer?) angle to open first tile, default: 0
- {end_angle} (integer?) angle to limit open tile, default: 360
- {tile_width} (integer?) menu tile width, default: 15

PiemenuAnimation                                            *PiemenuAnimation*

- {duration} (integer?) open animation duration milliseconds. default: 100

PiemenuMenu                                                      *PiemenuMenu*

- {action} (fun()) action triggered by |piemenu.nvim-piemenu.finish()|
- {text} (string) displayed text in menu tile

==============================================================================
HIGHLIGHT GROUPS                               *piemenu.nvim-HIGHLIGHT-GROUPS*

PiemenuCurrent                                             *hl-PiemenuCurrent*
  used for current selected menu content

PiemenuCurrentBorder                                 *hl-PiemenuCurrentBorder*
  used for current selected menu border

PiemenuNonCurrent                                       *hl-PiemenuNonCurrent*
  used for non selected menu content

PiemenuNonCurrentBorder                           *hl-PiemenuNonCurrentBorder*
  used for non selected menu border

==============================================================================
EXAMPLES                                               *piemenu.nvim-EXAMPLES*

>lua
  vim.opt.mouse = "a"

  local group = vim.api.nvim_create_augroup("config.piemenu", {})
  vim.api.nvim_create_autocmd({ "FileType" }, {
    group = group,
    pattern = { "piemenu" },
    callback = function()
      vim.o.mousemoveevent = true
      vim.keymap.set("n", "<MouseMove>", [[<Cmd>lua require("piemenu").highlight()<CR>]], { buffer = true })
      vim.keymap.set("n", "<LeftDrag>", [[<Cmd>lua require("piemenu").highlight()<CR>]], { buffer = true })
      vim.keymap.set("n", "<LeftRelease>", [[<Cmd>lua require("piemenu").finish()<CR>]], { buffer = true })
      vim.keymap.set("n", "<RightMouse>", [[<Cmd>lua require("piemenu").cancel()<CR>]], { buffer = true })
    end,
  })

  vim.keymap.set("n", "<RightMouse>", [[<LeftMouse><Cmd>lua require("piemenu").start("example")<CR>]])
  require("piemenu").register("example", {
    menus = {
      {
        text = "📋 copy",
        action = function()
          vim.cmd.normal({ args = { "yy" }, bang = true })
        end,
      },
      {
        text = "📝 paste",
        action = function()
          vim.cmd.normal({ args = { "p" }, bang = true })
        end,
      },
      {
        text = "✅ save",
        action = function()
          vim.cmd.write()
        end,
      },
      {
        text = "👉 goto file",
        action = function()
          vim.cmd.normal({ args = { "gF" }, bang = true })
        end,
      },
      {
        text = "📚 help",
        action = function()
          vim.cmd.help(vim.fn.expand("<cword>"))
        end,
      },
      {
        text = "❌ close",
        action = function()
          vim.cmd.quit()
        end,
      },
    },
  })

  -- start by gesture.nvim (optional)
  local piemenu = require("piemenu")
  local gesture = require("gesture")
  gesture.register({
    name = "open pie menu",
    inputs = { gesture.up() },
    action = function(ctx)
      piemenu.start("gesture_example", { position = ctx.last_position })
    end,
  })

  piemenu.register("gesture_example", {
    menus = {
      {
        text = "🆕 new tab",
        action = function()
          vim.cmd.tabedit()
        end,
      },
      {
        text = "🏠 open vimrc",
        action = function()
          vim.cmd.edit(vim.env.MYVIMRC)
        end,
      },
      {
        text = "🔃 reload",
        action = function()
          vim.cmd.edit({ bang = true })
        end,
      },
      {
        text = "😃 smile",
        action = function()
          vim.cmd.smile()
        end,
      },
    },
  })
<

==============================================================================
vim:tw=78:ts=8:ft=help
